#!/usr/bin/env python
#
# Copyright (c) 2015, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#  - Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#  - Neither the name of Arista Networks nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#pylint: disable=W0703,E1103

import os

TEMP_CONFIG = '/tmp/tmp-run-commands'

def main(attributes):
    ''' Runs a set of EOS commands, starting from enable mode.

    This action is dual-supervisor compatible.

    Attributes:
        url: path to source command list/template
        variables (optional): 
             list of value substitutions (for a template)
        
    Special_attributes: 
        NODE: API object - see documentation for details

    Example:
        ::

          -
            action: run_cli_commands
            attributes:
              url: files/templates/ma1.template
              variables:
                ipaddress: allocate('mgmt_subnet')
            name: 'configure ma1'
    '''

    node = attributes.get('NODE')
    url = attributes.get('url')

    if not url:
        raise Exception('Missing attribute(\'url\')')

    try:
        node.retrieve_url(url, TEMP_CONFIG)
    except Exception as exc:
        raise Exception('Unable to retrieve config from URL (%s)' % 
                        exc)

    contents = open(TEMP_CONFIG, 'r').read()

    variables = attributes.get('variables')
    if not variables:
        variables = {}

    if not isinstance(variables, dict):
        node.log_msg('Variables: %s' % variables)
        raise Exception('Unable to perform variable substitution - '
                        'invalid variables')


    contents = node.substitute(contents, variables)
    commands = [x for x in contents.split('\n') if x]

    try:
        node.api_enable_cmds(commands,
                             text_format=True)
    except Exception as exc:
        raise Exception('Running CLI commands %s failed: %s' % 
                        (commands, exc.message))

    # Only remove this in case everything else succeeded
    # for debugging purposes
    os.remove(TEMP_CONFIG)
